<?php
/**
 * @file
 * Tests for the public class
 */

class ShareaholicPublicTestCase extends DrupalWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'ShareaholicPublic class functionality',
      'description' => 'Tests the ShareaholicPublic functions',
      'group' => 'Shareaholic'
    );
  }

  public function setUp() {
    parent::setUp('shareaholic');
  }

  public function testGetUserName() {
    $first_username = 'first_username';
    $second_username = 'second_username';
    $first_name = 'firstname';
    $last_name = 'lastname';

    $account = new stdClass;
    $account->field_fullname = array('und' => array('0' => array('value' => $first_username)));
    $this->assertEqual($first_username, ShareaholicPublic::get_user_name($account), 'It should get the name from field_fullname');

    $account = new stdClass;
    $account->field_full_name = array('und' => array('0' => array('value' => $first_username)));
    $this->assertEqual($first_username, ShareaholicPublic::get_user_name($account), 'It should get the name from field_full_name');


    $account = new stdClass;
    $account->field_fullname = array('und' => array('0' => array('value' => $first_username)));
    $account->field_full_name = array('und' => array('0' => array('value' => $second_username)));
    $this->assertEqual($second_username, ShareaholicPublic::get_user_name($account), 'When both field_fullname and field_full_name are set, it should get the name from field_full_name');

    $account = new stdClass;
    $account->name = $first_username;
    $account->field_first_name = array('und' => array('0' => array('value' => $first_name)));
    $account->field_last_name = array('und' => array('0' => array('value' => $last_name)));
    $this->assertEqual($first_name . ' ' . $last_name, ShareaholicPublic::get_user_name($account), 'When both field_first_name and field_last_name are set, it should get the right full name');

    $account = new stdClass;
    $account->name = $first_username;
    $account->field_firstname = array('und' => array('0' => array('value' => $first_name)));
    $account->field_lastname = array('und' => array('0' => array('value' => $last_name)));
    $this->assertEqual($first_name . ' ' . $last_name, ShareaholicPublic::get_user_name($account), 'When both field_firstname and field_lastname are set, it should get the right full name');

    $account = new stdClass;
    $account->name = $first_username;
    $this->assertEqual($first_username, ShareaholicPublic::get_user_name($account), 'When there are no fields set, then get the default user name');
  }


  public function testGetImageUrlFor() {
    $node = new stdClass;
    $node->field_image = array('und' => array('0' => array('uri' => 'public://files/test.png')));
    $this->assertNotNull(ShareaholicPublic::get_image_url_for($node), 'When the node has a field_image defined, it should not return null');

    $node = new stdClass;
    $this->assertNull(ShareaholicPublic::get_image_url_for($node), 'When the node does not have field_image defined, it should return null');
  }

  public function testPostFirstImage() {
    $img = 'test.png';
    $body = '<p><img src="test.png"/><img src="bogus.png" /></p>';
    $this->assertEqual($img, ShareaholicPublic::post_first_image($body), 'When two image tags are present, return first one');

    $body = "<p><img src='test.png' /><img src='bogus.png' /></p>";
    $this->assertEqual($img, ShareaholicPublic::post_first_image($body), 'Even when single quotes are used, it returns the first image');

    $body = "<p><img src='test.png'><img src='bogus.png' /></p>";
    $this->assertEqual($img, ShareaholicPublic::post_first_image($body), 'Even if the first image is not closed, should still return it');

    $body = '<p></p>';
    $this->assertFalse(ShareaholicPublic::post_first_image($body), 'If there is no image, it returns false');

    $body = "<p><img alt='stuff' class='more_stuff' src='test.png'/><img alt='stuff' class='more_stuff' src='bogus.png'/></p>";
    $this->assertEqual($img, ShareaholicPublic::post_first_image($body), 'Even if the first image tag has other attributes it should still return it');

    $body = "<p><img src='test.png'/><img alt='stuff' class='more_stuff' src='bogus.png'/></p>";
    $this->assertEqual($img, ShareaholicPublic::post_first_image($body), 'It should return the test.png');

    $body = "<p><img src='test.png' alt=''/><img src='bogus.png'/></p>";
    $this->assertEqual($img, ShareaholicPublic::post_first_image($body), 'It should return the test.png');
  }

  public function testCanvas() {
    $canvas = ShareaholicPublic::canvas('123', 'share_buttons');
    $this->assertTrue(!empty($canvas), 'The canvas should not be empty');
  }

  public function testGetVisibility() {
    $node = new stdClass;
    $this->assertTrue(is_null(ShareaholicPublic::get_visibility($node)), 'If we cannot determine visibility then it should return NULL');

    $node->status = 0;
    $this->assertEqual('draft', ShareaholicPublic::get_visibility($node), 'If it is a draft, then return draft');

    $node->status = 1;
    $this->assertTrue(is_null(ShareaholicPublic::get_visibility($node)), 'If it is not a draft and is not excluded, then it should return NULL');

    $node->shareaholic_options = array(
      'shareaholic_exclude_from_recommendations' => false
    );
    $node->status = 1;
    $this->assertTrue(is_null(ShareaholicPublic::get_visibility($node)), 'If it is not to be excluded, then return NULL');

    $node->shareaholic_options = array(
      'shareaholic_exclude_from_recommendations' => true
    );
    $node->status = 1;
    $this->assertTrue('private', ShareaholicPublic::get_visibility($node), 'If it is to be excluded, then return private');

    $node->status = 0;
    $this->assertEqual('private', ShareaholicPublic::get_visibility($node), 'If it is to be excluded and is a draft, then return private as it overrules draft');
  }
}