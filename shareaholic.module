<?php

/**
 * @file
 * Allows site owner to add share buttons/recommendations on their website
 */

define('SHAREAHOLIC_MODULE_PATH', drupal_get_path('module', 'shareaholic'));
define('SHAREAHOLIC_ASSET_DIR', SHAREAHOLIC_MODULE_PATH . '/assets/');
define('SHAREAHOLIC_DEBUG', getenv('SHAREAHOLIC_DEBUG'));

module_load_include('php', 'shareaholic', 'utilities');
module_load_include('php', 'shareaholic', 'admin');
module_load_include('php', 'shareaholic', 'public');

/**
 * Implements hook_init()
 * This gets called at the beginning of a non-cached page request
 * Ideal for setting response headers
 *
 * Force edge mode for IE so that our plugins will look nicer
 *
 */
function shareaholic_init() {
  ShareaholicPublic::set_xua_compatible_header();
  if(!ShareaholicUtilities::is_admin_page()) {
    ShareaholicPublic::insert_content_meta_tags();
  }
}

/**
 * Implementation of hook_menu()
 *
 * Establishes "routes" for the Shareaholic module
 *
 * @return The menu structure containing link to settings page
 */
function shareaholic_menu() {
  // Path to the shareaholic settings page
  $items['admin/config/content/shareaholic/advanced'] = array(
    'title' => 'Shareaholic Advanced Settings',
    'description' => 'Advanced settings for the Shareaholic module',
    'page callback' => 'shareaholic_admin_advanced',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 2
  );

  $items['admin/config/content/shareaholic/settings'] = array(
    'title' => 'Shareaholic App Manager',
    'description' => 'Manage Share Buttons and Recommendations for your site',
    'page callback' => 'shareaholic_admin_settings',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => 1
  );
  return $items;
}


/**
 * Renders page for shareaholic advanced settings
 *
 * @return The theme to render the advanced settings page
 */
function shareaholic_admin_advanced() {
  return theme('shareaholic_admin_advanced');
}

/**
 * Renders page for shareaholic app manager settings
 *
 * @return The theme to render the app manager page
 */
function shareaholic_admin_settings() {
  return theme('shareaholic_admin_settings');
}


/**
 * Implements hook_theme().
 *
 * Defines the themes for each template in this module
 *
 * @return array An array that includes themes implemented for shareaholic
 * templates
 */
function shareaholic_theme() {
  return array(
    'shareaholic_admin_advanced' => array(
      'path' => SHAREAHOLIC_MODULE_PATH . '/templates',
      'template' => 'shareaholic_admin_advanced',
    ),
    'shareaholic_admin_settings' => array(
      'path' => SHAREAHOLIC_MODULE_PATH . '/templates',
      'template' => 'shareaholic_admin_settings',
    ),
    'shareaholic_tos_modal' => array(
      'render element' => 'form',
      'path' => SHAREAHOLIC_MODULE_PATH . '/templates',
      'template' => 'shareaholic_tos_modal',
    ),
    'shareaholic_failure_modal' => array(
      'render element' => 'form',
      'path' => SHAREAHOLIC_MODULE_PATH . '/templates',
      'template' => 'shareaholic_failure_modal',
    ),
    'shareaholic_apps_configuration' => array(
      'render element' => 'form',
      'path' => SHAREAHOLIC_MODULE_PATH . '/templates',
      'template' => 'shareaholic_apps_configuration'
    ),
  );
}

/**
 * Implements hook_page_alter()
 *
 * Adds certain html tags to the head of the document
 * of public pages before it is rendered by Drupal
 * independent of what is on that page
 *
 */
function shareaholic_page_alter(&$page) {
  ShareaholicPublic::insert_disable_analytics_meta_tag();
  ShareaholicPublic::insert_script_tag();
}


/**
 * Implements hook_process_html()
 *
 * Add the ToS notice to the page in admin pages only
 */
function shareaholic_process_html(&$vars) {
  ShareaholicAdmin::show_terms_of_service_notice($vars);
}

/**
 * Implements hook_node_view()
 *
 * When a node is rendered, insert the content meta tags
 *
 */
function shareaholic_node_view($node, $view_mode, $langcode) {
  ShareaholicPublic::insert_content_meta_tags($node, $view_mode, $langcode);
  ShareaholicPublic::insert_widgets($node, $view_mode, $langcode);
}



/**
 * Returns the form for the terms of service modal popup
 */
function shareaholic_tos_modal_form() {
  $form['#theme'] = 'shareaholic_tos_modal';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Get Started Â»'),
  );
  $form['submit']['#attributes']['class'][] = 'btn_main';
  return $form;
}

/**
 * Prepare variables to be used in the shareaholic_tos_modal
 * template
 */
function template_preprocess_shareaholic_tos_modal(&$variables) {
  _prepare_template_form_variables($variables, 'shareaholic_tos_modal');
  $variables['image_url'] = '/' . SHAREAHOLIC_ASSET_DIR . '/img';
}

/**
 * Submit handler for the ToS modal: update values in the database
 * By storing 'true' for shareaholic_has_accepted_tos
 * and get or create an api key if it does not already exists
 *
 */
function shareaholic_tos_modal_form_submit($form, &$form_state) {
  ShareaholicUtilities::accept_terms_of_service();
  ShareaholicUtilities::get_or_create_api_key();
}



/**
 * Returns the form for the failure modal popup
 */
function shareaholic_failure_modal_form() {
  $form['#theme'] = 'shareaholic_failure_modal';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Retry'),
  );
  $form['submit']['#attributes']['class'][] = 'btn_main';
  return $form;
}


/**
 * Prepare variables to be used in the shareaholic_failure_modal
 * template
 */
function template_preprocess_shareaholic_failure_modal(&$variables) {
  _prepare_template_form_variables($variables, 'shareaholic_failure_modal');
}


/**
 * Submit handler for the shareaholic_failure_modal
 * When submitted, try to create an api key for the user
 *
 */
function shareaholic_failure_modal_form_submit($form, &$form_state) {
  ShareaholicUtilities::get_or_create_api_key();
}



/**
 * The form object for the advanced settings
 * The form will have input for:
 * - disable analytics (checkbox, default unchecked)
 *
 */
function shareaholic_advanced_settings_form() {
  $disable_analytics_checked = ShareaholicUtilities::get_option('disable_analytics');
  $form['advanced_settings'] = array(
    '#prefix' => '<fieldset class="app"><legend><h2>' . t('Advanced') . '</h2></legend>',
    '#suffix' => '</fieldset>',
  );
  $form['advanced_settings']['disable_analytics'] = array(
    '#type' => 'checkbox',
    '#title' => t('Disable Analytics (it is recommended NOT to disable analytics)'),
  );
  $form['advanced_settings']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Changes')
  );
  $form['advanced_settings']['submit']['#attributes']['class'][] = 'settings';
  if($disable_analytics_checked === 'on') {
    $form['advanced_settings']['disable_analytics']['#attributes'] = array('checked' => 'checked');
  }
  return $form;
}

function shareaholic_advanced_settings_form_submit($form, &$form_state) {
  if(ShareaholicUtilities::has_tos_and_apikey()) {
    $checked = ($form_state['values']['disable_analytics'] === 1) ? 'on' : 'off';
    ShareaholicUtilities::update_options(array(
      'disable_analytics' => $checked
    ));
  }
}

/**
 * The form object for the reset plugin
 * The form will have button to reset the plugin
 *
 */
function shareaholic_reset_plugin_form() {
  $form['reset'] = array(
    '#prefix' => '<fieldset class="app"><legend><h2>' . t('Reset') . '</h2></legend>',
    '#suffix' => '</fieldset>',
  );
  $form['reset']['submit'] = array(
    '#type' => 'submit',
    '#prefix' => '<p>' . t('This will reset all of your settings and start you from scratch. This can not be undone.') . '</p>',
    '#value' => t('Reset Plugin')
  );
  $form['reset']['submit']['#attributes']['class'][] = 'settings';

  return $form;
}

/**
 * The submit handler for the reset plugin form
 * When the user resets the plugin, destroy settings
 * and get a new api key
 *
 */
function shareaholic_reset_plugin_form_submit($form, &$form_state) {
  ShareaholicUtilities::destroy_settings();
  ShareaholicUtilities::get_or_create_api_key();
}


/**
 * Returns the form to configure the shareaholic apps
 */
function shareaholic_apps_configuration_form() {
  $form['#theme'] = 'shareaholic_apps_configuration';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Changes'),
  );
  $form['submit']['#attributes']['class'][] = 'settings';
  $form['submit']['#attributes']['onclick'] = 'this.value="' . t('Saving Changes...') . '"';
  return $form;
}


/**
 * Prepare variables to be used in the shareaholic_apps_configuration
 * template
 */
function template_preprocess_shareaholic_apps_configuration(&$variables) {
  _prepare_template_form_variables($variables, 'shareaholic_apps_configuration');
}


/**
 * Submit handler for the shareaholic_apps_configuration form
 * When submitted, update the location settings
 *
 */
function shareaholic_apps_configuration_form_submit($form, &$form_state) {
  $settings = ShareaholicUtilities::get_settings();
  $recommendations = $settings['recommendations'];
  if(empty($recommendations)) {
    return;
  }
  $form_input = $form_state['input'];
  $page_types = ShareaholicUtilities::page_types();
  foreach($page_types as $key => $page_type) {
    $below_content = $page_type->type . '_below_content';
    if(!isset($form_input['recommendations'][$below_content]) ||
        !isset($form_input['recommendations']["{$below_content}_location_id"]) ||
        $form_input['recommendations'][$below_content] !== 'on') {
      $settings['recommendations'][$below_content] = 'off';
    } else {
      $settings['recommendations'][$below_content] = 'on';
      $settings['location_name_ids']['recommendations'][$below_content] = $form_input['recommendations']["{$below_content}_location_id"];
    }
  }
  ShareaholicUtilities::set_settings($settings);
  drupal_set_message(t('Shareaholic Settings Saved'), 'status');
}


/**
 * Prepares the form for use in the templates
 * by storing the form as strings in the $variables object
 * that can be printed in the template
 */
function _prepare_template_form_variables(&$variables, $form_id) {
  $variables[$form_id] = array();
  $hidden = array();
  foreach (element_children($variables['form']) as $key) {
    $type = $variables['form'][$key]['#type'];
    if ($type == 'hidden' || $type == 'token') {
      $hidden[] = drupal_render($variables['form'][$key]);
    }
    else {
      $variables[$form_id][$key] = drupal_render($variables['form'][$key]);
    }
  }
  $variables[$form_id]['hidden'] = implode($hidden);
}

