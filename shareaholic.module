<?php



/**
 * Implements hook_theme().
 */
function shareaholic_theme() {

  return [
    'shareaholic_tos_modal' => [
      'variables' => [
        'path' => '',
      ],
    ],
    'shareaholic_settings' => [
      'variables' => [
        'apiKey' => '',
        'verificationKey' => '',
        'apiHost' => '',
        'serviceHost' => '',
        'assetHost' => '',
        'language' => '',
      ],
    ],
  ];

}

/**
 * Implements hook_preprocess_HOOK().
 */
function shareaholic_preprocess_page(&$variables) {

  if (\Drupal::service('router.admin_context')->isAdminRoute()) {

    $path = '/admin/config/shareaholic/settings';
    $render_message = \Drupal\Core\Render\Markup::create(
      '<strong>Action required: </strong> You\'ve installed Shareaholic for Drupal. We\'re ready when you are. <a href="' . $path . '">Get Started Now</a>.',
      [':status' => $path]
    );

    $settings = \Drupal::config('shareaholic.settings');
    $api_key = $settings->get('api_key');

    if (!$api_key) {
      \Drupal::messenger()->addMessage($render_message, 'warning');
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function shareaholic_page_attachments(array &$attachments) {

  $config = \Drupal::config(\Drupal\shareaholic\Form\AdvancedSettingsForm::SETTINGS_ID);

  $siteName = \Drupal::config('system.site')->get('name');
  $attachments['#attached']['html_head'][] = shareaholic_generate_metatag_array('page', 'site_name', $siteName);

  $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $attachments['#attached']['html_head'][] = shareaholic_generate_metatag_array('page', 'language', $langcode);

  $siteId = $config->get('api_key');
  $attachments['#attached']['html_head'][] = shareaholic_generate_metatag_array('page', 'site_id', $siteId);

  $moduleVersion = system_get_info('module', 'shareaholic')['version'];
  $attachments['#attached']['html_head'][] = shareaholic_generate_metatag_array('page', 'drupal_version', $moduleVersion);

}

/**
 * Implements hook_entity_view().
 */
function shareaholic_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {

  if ($view_mode !== 'full' || !$entity instanceof \Drupal\node\NodeInterface) {
    return;
  }

  $config = \Drupal::config(\Drupal\shareaholic\Form\AdvancedSettingsForm::SETTINGS_ID);

  /*
   * URL
   */
  $url = Drupal\Core\Url::fromRoute('<current>')->toString();
  $build['#attached']['html_head'][] = shareaholic_generate_metatag_array('node', 'url', $url);

  /*
   * Published time
   */
  // TODO Actually this is misleading as creation time is not the same as publishing time.
  // Publication time is not stored in core.
  $publishedTime = date('c', $entity->getCreatedTime());
  $build['#attached']['html_head'][] = shareaholic_generate_metatag_array('node', 'article_published_time', $publishedTime);

  /*
   * Modification time
   */
  $modifiedTime = date('c', $entity->getChangedTime());
  $build['#attached']['html_head'][] = shareaholic_generate_metatag_array('node', 'article_modified_time', $modifiedTime);

  /*
   * Author
   */
  $author = $entity->getOwner();

  // TODO There is no guarantee that these fields are text fields!
  // TODO There is also no guarantee these values won't be empty even if fields
  // exist.
  $username = NULL;
  if($author->hasField('field_fullname')) {
    $username = $author->get('field_fullname')->getString();
  }

  if (!$username && $author->hasField('field_full_name')) {
    $username = $author->get('field_full_name')->getString();
  }

  if (!$username) {
    $firstName = $author->hasField('field_firstname') ? $author->get('field_firstname')->getString() : NULL;
    if (!$firstName) {
      $firstName = $author->hasField('field_first_name') ? $author->get('field_first_name')->getString() : NULL;
    }

    $lastName = $author->hasField('field_lastname') ? $author->get('field_lastname')->getString() : NULL;
    if (!$firstName) {
      $lastName = $author->hasField('field_last_name') ? $author->get('field_last_name')->getString() : NULL;
    }

    if ($firstName && $lastName) {
      $username = "$firstName $lastName";
    }
  }

  if ($username) {
    $build['#attached']['html_head'][] = shareaholic_generate_metatag_array('node', 'article_author_name', $username);
  }

  /*
   * Keywords
   */
  $keywords = [];

  if (Drupal::database()->schema()->tableExists('taxonomy_index')) {
    $query = Drupal::database()->query('SELECT tid FROM {taxonomy_index} WHERE nid = :nid', [':nid' => $entity->id()]);
    $results = $query->fetchAll();
    foreach ($results as $result) {
      $term = Drupal\taxonomy\Entity\Term::load($result->tid);
      if (empty($term)) continue;

      $keywords[] = Drupal\Component\Utility\Html::escape($term->getName());

      $vocabulary = \Drupal\taxonomy\Entity\Vocabulary::load($term->getVocabularyId());
      if (empty($vocabulary)) continue;

      $terms[] = Drupal\Component\Utility\Html::escape($vocabulary->label());
    }

    $keywords = array_unique($keywords);
  }
  if (!empty($keywords)) {
    $build['#attached']['html_head'][] = shareaholic_generate_metatag_array('node', 'keywords', implode(', ', $keywords));
  }

  /*
   * Image
   */
  $image = shareaholic_extract_image_url_from_entity($entity);
  if (!empty($image)) {
    $build['#attached']['html_head'][] = shareaholic_generate_metatag_array('node', 'image', $image);
  }

  /*
   * Visibility
   */
  $articleVisibility = NULL;


  if(!$entity->isPublished()) {
    $articleVisibility = 'draft';
  }

  /*
   *  TODO: Some dependency on shareaholic options. Not sure if relevant in D8 yet.
   *
   *  if(isset($node->shareaholic_options) && $node->shareaholic_options['shareaholic_exclude_from_recommendations']) {
   *    $visibility = 'private';
   *  }
   */

  $anonymousUser = Drupal\user\Entity\User::getAnonymousUser();
  if (!$entity->access('view', $anonymousUser)) {
    $articleVisibility = 'private';
  }

  if (!empty($articleVisibility)) {
    $build['#attached']['html_head'][] = shareaholic_generate_metatag_array('node', 'article_visibility', $articleVisibility);
  }

  /*
   * Shareable
   */
  $shareablePage = NULL;

  $anonymousUser = Drupal\user\Entity\User::getAnonymousUser();
  if (!$entity->isPublished() || !$entity->access('view', $anonymousUser)) {
    $shareablePage = 'false';
  }

  if (!empty($shareablePage)) {
    $build['#attached']['html_head'][] = shareaholic_generate_metatag_array('node', 'shareable_page', $shareablePage);
  }

  /*
   * OpenGraph
   */
  $disableOGTags =  $config->get('disable_og_tags');

  // TODO Account also for a per-node configuration that doesn't exist yet.
  if (!$disableOGTags) {
    $image = shareaholic_extract_image_url_from_entity($entity);

    if (!empty($image)) {
      $ogtag = [
        '#tag' => 'meta',
        '#attributes' => [
          'name' => "og:image",
          'content' => $image,
        ],
      ];

      $build['#attached']['html_head'][] = [$ogtag, 'shareaholic_node:og:image'];
    }
  }
}


function shareaholic_generate_metatag_array($section, $name, $content) {
  return [
    [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => "shareaholic:$name",
        'content' => $content,
      ],
    ],
    "shareaholic_$section:$name",
  ];
}

function shareaholic_extract_image_url_from_entity(\Drupal\Core\Entity\ContentEntityInterface $entity) {

  $image = NULL;

  // TODO
  // This may result in an error if this is not a typical image field, but
  // for example a Media one!
  // TODO Also we can have a hanging reference here!
  if ($entity->hasField('field_image')) {
    $image = file_create_url($entity->field_image->entity->getFileUri());
  } elseif ($entity->hasField('field_simage')) {
    $image = file_create_url($entity->field_simage->entity->getFileUri());
  } elseif ($entity->hasField('body')) {
    $body = $entity->get('body')->getString();
    preg_match_all('/<img.*?src=[\'"](.*?)[\'"].*?>/i', $body, $matches);
    if(isset($matches) && isset($matches[1][0]) ) {
      // Exclude base64 images; meta tags require full URLs
      if (strpos($matches[1][0], 'data:') === false) {
        // file_create_url function doesn't convert paths starting with "/" so check for "/" and trim it off if present
        if (substr($matches[1][0], 0, 1) === "/") {
          $image = file_create_url(substr($matches[1][0], 1));
        } else {
          $image = file_create_url($matches[1][0]);
        }
      }
    }
  }

  return $image;
}
