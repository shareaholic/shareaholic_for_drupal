<?php

/**
 * @file
 * Allows site owner to add share buttons/recommendations on their website
 */

define('SHAREAHOLIC_URL', 'http://spreadaholic.com:8080');
define('MODULE_PATH', drupal_get_path('module', 'shareaholic'));
define('SHAREAHOLIC_ASSET_DIR', MODULE_PATH . '/assets/');
define('SHAREAHOLIC_DEBUG', true);

module_load_include('php', 'shareaholic', 'utilities');
module_load_include('php', 'shareaholic', 'admin');
module_load_include('php', 'shareaholic', 'public');

/**
 * Implements hook_init()
 * This gets called at the beginning of a non-cached page request
 *
 * Force edge mode for IE so that our plugins will look nicer
 *
 */
function shareaholic_init() {
  ShareaholicPublic::insert_xua_compatible_header();
}

/**
 * Implementation of hook_menu()
 *
 * Establishes "routes" for the Shareaholic module
 *
 * @return The menu structure containing link to settings page
 */
function shareaholic_menu() {
  // Path to the shareaholic settings page
  $items['admin/config/content/shareaholic/settings'] = array(
    'title' => 'Shareaholic Settings',
    'description' => 'Settings for the Shareaholic Plugin',
    'page callback' => 'shareaholic_admin_settings',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}


/**
 * Renders page for shareaholic admin settings
 *
 * @return The theme to render the settings page
 */
function shareaholic_admin_settings() {
  return theme('shareaholic_admin_settings');
}


/**
 * Implements hook_theme().
 * Defines the themes for each template in this module
 *
 * @return array An array that includes themes implemented for shareaholic
 * templates
 */
function shareaholic_theme() {
  return array(
    'shareaholic_admin_settings' => array(
      'path' => MODULE_PATH . '/templates',
      'template' => 'shareaholic_admin_settings',
    ),
    'shareaholic_terms_of_service_modal' => array(
      'render element' => 'form',
      'path' => MODULE_PATH . '/templates',
      'template' => 'terms_of_service_modal',
    ),
    'shareaholic_failed_to_create_api_key_modal' => array(
      'render element' => 'form',
      'path' => MODULE_PATH . '/templates',
      'template' => 'failed_to_create_api_key_modal',
    ),
  );
}

/**
 * Implements hook_html_head_alter()
 * Adds certain html tags to the head of the document
 * of admin pages before it is rendered by Drupal
 *
 */
function shareaholic_html_head_alter(&$head_elements) {
  ShareaholicPublic::insert_into_head_tag($head_elements);
}

/**
 * Returns the form for the terms of service modal popup
 */
function shareaholic_tos_modal_form() {
  $form['#theme'] = 'shareaholic_terms_of_service_modal';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Get Started Â»'),
  );
  $form['submit']['#attributes']['class'][] = 'btn_main';
  return $form;
}

/**
 * Submit handler for the ToS modal: update values in the database
 * By storing 'true' for shareaholic_has_accepted_tos
 * and get or create an api key if it does not already exists
 *
 */
function shareaholic_tos_modal_form_submit($form, &$form_state) {
  ShareaholicUtilities::accept_terms_of_service();
  ShareaholicUtilities::get_or_create_api_key();
}

/**
 * Returns the form for the failed to create api key modal popup
 */
function shareaholic_failed_to_create_api_key_form() {
  $form['#theme'] = 'shareaholic_failed_to_create_api_key_modal';
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Retry'),
  );
  $form['submit']['#attributes']['class'][] = 'btn_main';
  return $form;
}

/**
 * Submit handler for the shareaholic_failed_to_create_api_key modal
 * When submitted, try to create an api key for the user
 *
 */
function shareaholic_failed_to_create_api_key_form_submit($form, &$form_state) {
  ShareaholicUtilities::get_or_create_api_key();
}


/**
 * Prepare variables to be used in the terms_of_service_modal
 * template
 */
function template_preprocess_shareaholic_terms_of_service_modal(&$variables) {
  _prepare_template_form_variables($variables, 'shareaholic_tos_modal');
  $variables['image_url'] = '/' . SHAREAHOLIC_ASSET_DIR . '/img';
}


/**
 * Prepare variables to be used in the shareaholic_failed_to_create_api_key_modal
 * template
 */
function template_preprocess_shareaholic_failed_to_create_api_key_modal(&$variables) {
  _prepare_template_form_variables($variables, 'failed_api_key_modal');
}

/**
 * The form object for the advanced settings
 * The form will have input for:
 * - disable analytics (checkbox, default unchecked)
 *
 */
function shareaholic_advanced_settings_form() {
  $disable_analytics_checked = ShareaholicUtilities::get_option('disable_analytics');
  $form['advanced_settings'] = array(
    '#title' => t('Advanced'),
    '#type' => 'fieldset',
  );
  $form['advanced_settings']['disable_analytics'] = array(
    '#type' => 'checkbox',
    '#title' => 'Disable Analytics (it is recommended NOT to disable analytics)',
  );
  $form['advanced_settings']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Changes')
  );
  $form['advanced_settings']['submit']['#attributes']['class'][] = 'settings';
  $form['advanced_settings']['#attributes']['class'][] = 'form-fieldset';
  if($disable_analytics_checked === 'on') {
    $form['advanced_settings']['disable_analytics']['#attributes'] = array('checked' => 'checked');
  }
  return $form;
}

function shareaholic_advanced_settings_form_submit($form, &$form_state) {
  if(ShareaholicUtilities::has_tos_and_apikey()) {
    $checked = ($form_state['values']['disable_analytics'] === 1) ? 'on' : 'off';
    ShareaholicUtilities::update_options(array(
      'disable_analytics' => $checked
    ));
  }
}

/**
 * The form object for the reset plugin
 * The form will have button to reset the plugin
 *
 */
function shareaholic_reset_plugin_form() {
  $form['reset'] = array(
    '#title' => t('Reset'),
    '#type' => 'fieldset',
  );
  $form['reset']['submit'] = array(
    '#type' => 'submit',
    '#prefix' => '<p>This will reset all of your settings and start you from scratch. This can not be undone.</p>',
    '#value' => t('Reset Plugin')
  );
  $form['reset']['submit']['#attributes']['class'][] = 'settings';
  $form['reset']['#attributes']['class'][] = 'form-fieldset';

  return $form;
}

function shareaholic_reset_plugin_form_submit($form, &$form_state) {
  ShareaholicUtilities::destroy_settings();
  ShareaholicUtilities::get_or_create_api_key();
}

/**
 * Prepares the form for use in the templates
 * by storing the form as strings in the $variables object
 * that can be printed in the template
 */
function _prepare_template_form_variables(&$variables, $form_id) {
  $variables[$form_id] = array();
  $hidden = array();
  foreach (element_children($variables['form']) as $key) {
    $type = $variables['form'][$key]['#type'];
    if ($type == 'hidden' || $type == 'token') {
      $hidden[] = drupal_render($variables['form'][$key]);
    }
    else {
      $variables[$form_id][$key] = drupal_render($variables['form'][$key]);
    }
  }
  $variables[$form_id]['hidden'] = implode($hidden);
}

